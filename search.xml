<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>班级话剧脚本v1.0</title>
      <link href="/2025/10/16/%E7%8F%AD%E7%BA%A7%E8%AF%9D%E5%89%A7%E8%84%9A%E6%9C%ACv1-0/"/>
      <url>/2025/10/16/%E7%8F%AD%E7%BA%A7%E8%AF%9D%E5%89%A7%E8%84%9A%E6%9C%ACv1-0/</url>
      
        <content type="html"><![CDATA[<h1 id="拍摄脚本">拍摄脚本</h1><h2 id="概述">概述</h2><ul><li><strong>主题</strong>：当代大学生在技术报国与个人发展之间的思考与选择，展现新时代青年的责任担当与家国情怀。</li><li><strong>核心冲突</strong>：短期现实利益（大厂Offer）与长期理想价值（技术服务国家基础产业）的碰撞与统一。</li><li><strong>风格</strong>：现实主义与浪漫主义相结合，注重情感渲染和思想表达。</li><li><strong>时长</strong>： 约6分钟。</li><li><strong>主要场景</strong>：大学软件学院实验室、工厂车间（通过PPT背景或简单布景呈现）。</li></ul><hr /><h2 id="分镜头脚本">分镜头脚本</h2><h3 id="第一幕分歧"><strong>第一幕：分歧</strong></h3><ul><li><strong>场景</strong>：软件学院实验室。PPT背景显示大学实验室或代码界面。至少两台电脑、一张大桌子、四个凳子。王教授坐在一旁的办公椅上。</li><li><strong>氛围</strong>：略显疲惫但充满激情，随后引入争论带来的紧张感。</li></ul><table><colgroup><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /></colgroup><thead><tr><th style="text-align: left;">镜号</th><th style="text-align: left;">景别</th><th style="text-align: left;">角度</th><th style="text-align: left;">镜头运动</th><th style="text-align: left;">画面内容</th><th style="text-align: left;">台词/字幕</th><th style="text-align: left;">时长(秒)</th><th style="text-align: left;">音乐/音效</th></tr></thead><tbody><tr><td style="text-align: left;">1</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">实验室全景。李明、赵宇、陈曦和几位同学围坐在电脑前，屏幕上是代码界面。大家神情专注，但带着倦容。</td><td style="text-align: left;">键盘敲击声、电脑风扇声</td><td style="text-align: left;">5</td><td style="text-align: left;">轻微的环境音，略带紧迫感的背景音乐</td></tr><tr><td style="text-align: left;">2</td><td style="text-align: left;">中景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">推近</td><tdstyle="text-align: left;">李明兴奋地敲击键盘，眼神专注地盯着屏幕。</td><tdstyle="text-align: left;">李明：<strong>“就差最后一个算法优化！只要完成这个工业控制软件的适配，西北的这家企业生产就能摆脱对国外系统的依赖。”</strong></td><td style="text-align: left;">10</td><td style="text-align: left;">键盘敲击声加重</td></tr><tr><td style="text-align: left;">3</td><td style="text-align: left;">中景</td><td style="text-align: left;">侧拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">赵宇停下动作，皱眉看向李明，身体向后靠，露出不以为然的表情。</td><tdstyle="text-align: left;">赵宇：<strong>“唉，可是为了那所谓的软件项目我们都熬了三周了。待遇优渥的大厂的实习笔试下周就开始，真要为这个没报酬的项目放弃机会？”</strong></td><td style="text-align: left;">14</td><td style="text-align: left;">音乐中加入一丝不和谐音</td></tr><tr><td style="text-align: left;">4</td><td style="text-align: left;">近景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">陈曦看看李明，又看看赵宇，手指无意识地摩擦鼠标，面露犹豫。</td><tdstyle="text-align: left;">陈曦：<strong>“赵宇说得有道理，我们毕竟要毕业找工作…但我明白如今我国工厂的困境，也想用我的爱好和知识，切实做一点贡献……”</strong></td><td style="text-align: left;">14</td><td style="text-align: left;">音乐变得舒缓，带有思考性</td></tr><tr><td style="text-align: left;">5</td><td style="text-align: left;">中近景</td><td style="text-align: left;">仰拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">李明转身面向赵宇，眼神坚定，身体前倾。</td><tdstyle="text-align: left;">李明：<strong>“找工作固然重要，但有些事更重要！我爸是老工人，听他说，工厂里的设备明明是国产的，却要定期给外国企业交技术费，设备出了问题还得等外国人过来修。解决这样‘被卡脖子’的困境，就是我的梦想之一。”</strong></td><td style="text-align: left;">15</td><td style="text-align: left;">音乐转为坚定、激昂</td></tr><tr><td style="text-align: left;">6</td><td style="text-align: left;">特写</td><td style="text-align: left;">俯拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">赵宇叹气摇头，低声自语，表情复杂（混合着不理解、无奈和一丝自我怀疑）。</td><tdstyle="text-align: left;">赵宇：<strong>（自言自语）“李明真是天真，梦想也不能当饭吃啊。我们学软件是为了什么？不就是为了自己过上更好的生活吗？”</strong></td><td style="text-align: left;">10</td><td style="text-align: left;">音乐渐弱，留下环境音</td></tr><tr><td style="text-align: left;">7</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">渐暗</td><tdstyle="text-align: left;">灯光逐渐变暗，同学们在沉默或低声交谈中陆续起身离场。</td><td style="text-align: left;">无</td><td style="text-align: left;">5</td><td style="text-align: left;">键盘声停止，环境音渐消</td></tr></tbody></table><h3 id="第二幕困难"><strong>第二幕：困难</strong></h3><ul><li><strong>场景</strong>：工厂车间。PPT背景切换为工厂背景。工厂组成员穿着工作服。</li><li><strong>氛围</strong>： 焦急、无奈、紧迫。</li></ul><table><colgroup><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /></colgroup><thead><tr><th style="text-align: left;">镜号</th><th style="text-align: left;">景别</th><th style="text-align: left;">角度</th><th style="text-align: left;">镜头运动</th><th style="text-align: left;">画面内容</th><th style="text-align: left;">台词/字幕</th><th style="text-align: left;">时长(秒)</th><th style="text-align: left;">音乐/音效</th></tr></thead><tbody><tr><td style="text-align: left;">8</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">PPT工厂背景。工厂组成员围着一台停滞的设备，激烈讨论，做焦躁状。</td><td style="text-align: left;">嘈杂的讨论声、机器停滞的寂静</td><td style="text-align: left;">4</td><td style="text-align: left;">工厂环境音，急促警报声（若有）</td></tr><tr><td style="text-align: left;">9</td><td style="text-align: left;">中景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">跟拍</td><tdstyle="text-align: left;">小刘拿着数据本（或文件夹），焦急地走到经理面前。</td><tdstyle="text-align: left;">小刘：<strong>“经理，外国的公司又不提供修理了，因为这个设备的损坏，我们运动动作记录软件的有关研究已经停了半个月了！”</strong></td><td style="text-align: left;">8</td><td style="text-align: left;">背景音乐紧张、焦虑</td></tr><tr><td style="text-align: left;">10</td><td style="text-align: left;">近景</td><td style="text-align: left;">侧拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">小张懊恼地拍了下设备。</td><tdstyle="text-align: left;">小张：<strong>“太欺负人了，他们为了封锁我们，真是用尽了手段。音乐项目组那边也是这样。”</strong></td><td style="text-align: left;">6</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">11</td><td style="text-align: left;">近景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">小赵无奈地叹气。</td><tdstyle="text-align: left;">小赵：<strong>“哎，依赖人家的技术，就得看人家脸色……”</strong></td><td style="text-align: left;">4</td><td style="text-align: left;"></td></tr><tr><td style="text-align: left;">12</td><td style="text-align: left;">中景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">经理1愁容满面，看向小王。经理2在一旁催促。</td><tdstyle="text-align: left;">经理1：<strong>“小王，距离预定上市时间还有多久？”</strong>小王：<strong>“只有一周了……”</strong>经理2：<strong>“快，西北工业大学软件学院那边不是在攻关吗？快联系王教授！”</strong></td><td style="text-align: left;">10</td><td style="text-align: left;">音乐节奏加快，凸显紧迫感</td></tr><tr><td style="text-align: left;">13</td><td style="text-align: left;"><strong>插入镜头</strong></td><td style="text-align: left;"><strong>特写</strong></td><td style="text-align: left;"><strong>固定</strong></td><tdstyle="text-align: left;"><strong>PPT播放一段3-5秒的预录视频：工厂人员围在一起，对着设备指指点点，作焦躁状。</strong>(此镜头可循环播放作为背景)</td><td style="text-align: left;">无</td><td style="text-align: left;">5</td><td style="text-align: left;">刺耳的机器故障音效</td></tr></tbody></table><h3 id="第三幕抉择"><strong>第三幕：抉择</strong></h3><ul><li><strong>场景</strong>：实验室。PPT背景切换回实验室，但气氛凝重。王教授向大家展示工厂的困境。</li><li><strong>氛围</strong>： 沉重、反思、转折、振奋。</li></ul><table><colgroup><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /></colgroup><thead><tr><th style="text-align: left;">镜号</th><th style="text-align: left;">景别</th><th style="text-align: left;">角度</th><th style="text-align: left;">镜头运动</th><th style="text-align: left;">画面内容</th><th style="text-align: left;">台词/字幕</th><th style="text-align: left;">时长(秒)</th><th style="text-align: left;">音乐/音效</th></tr></thead><tbody><tr><td style="text-align: left;">14</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">实验室。王教授严肃地指向右侧（PPT方向）。同学们神情凝重地看着。</td><tdstyle="text-align: left;">王教授：<strong>“你们看，这是上周合作工厂传来的实时画面。面对着国外技术封锁，他们的生产线已经被迫停了半个月，每天损失近百万。”</strong></td><td style="text-align: left;">10</td><td style="text-align: left;">音乐低沉、严肃</td></tr><tr><td style="text-align: left;">15</td><td style="text-align: left;">特写</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">李明猛地站起，抓起桌上的代码本，表情决绝。</td><td style="text-align: left;">无</td><td style="text-align: left;">3</td><td style="text-align: left;">动作音效，音乐弦乐重音</td></tr><tr><td style="text-align: left;">16</td><td style="text-align: left;">特写</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">赵宇盯着电脑屏幕，手指悬在键盘上，眼神挣扎。</td><td style="text-align: left;">无</td><td style="text-align: left;">3</td><td style="text-align: left;">音乐持续，加入心跳声效</td></tr><tr><td style="text-align: left;">17</td><td style="text-align: left;">近景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">陈曦操作电脑，语气变得坚定。</td><tdstyle="text-align: left;">陈曦：<strong>“我刚才查了资料，这个项目如果成功，能申请国家技术专利，还能解决工厂面临的关键问题。”</strong></td><td style="text-align: left;">7</td><td style="text-align: left;">音乐中出现一丝希望的旋律</td></tr><tr><td style="text-align: left;">18</td><td style="text-align: left;">中景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">赵宇抬头，眼神复杂地看向李明。</td><tdstyle="text-align: left;">赵宇：<strong>“可大厂的机会……”</strong></td><td style="text-align: left;">3</td><td style="text-align: left;">音乐又回落些许</td></tr><tr><td style="text-align: left;">19</td><td style="text-align: left;">中近景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">李明将代码本递给赵宇，目光诚恳而充满期待。</td><tdstyle="text-align: left;">李明：<strong>“赵宇，你是我们中最擅长算法优化的。你想想，如果有一天，我们自己的软件能装在全国的工厂里，那种成就感，难道不比大厂的offer更让人骄傲吗？”</strong></td><td style="text-align: left;">12</td><td style="text-align: left;">音乐逐渐变得开阔、充满希望</td></tr><tr><td style="text-align: left;">20</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">王教授起身，在同学们中间自然走动。PPT背景开始缓慢播放华玲、陈炜、祝榆生等国防科技领域贡献者的照片或事迹简介。</td><tdstyle="text-align: left;">王教授：<strong>“同学们…我们学习软件的目的是什么？”</strong>（同学们依次回答：报效国家、追求个人理想、找个好工作）</td><td style="text-align: left;">28</td><td style="text-align: left;">音乐转为庄严、崇高</td></tr><tr><td style="text-align: left;">21</td><td style="text-align: left;">中景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">跟拍</td><tdstyle="text-align: left;">王教授边走边说，同学们认真聆听，若有所思。</td><tdstyle="text-align: left;">王教授：<strong>“嗯，都对…但我想说的是，只有中国兴盛起来，大家的梦想才会有实现的可能啊！…七〇一所的华玲和陈炜夫妇…独臂老人祝榆生…在国防科技领域，这样舍小家为大家的人物事例不胜枚举…我们西北工业大学的前辈们，也正是有这种情怀…”</strong></td><td style="text-align: left;">55</td><td style="text-align: left;">音乐持续，烘托情感</td></tr><tr><td style="text-align: left;">22</td><td style="text-align: left;">特写</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">赵宇紧握拳头，眼神中的犹豫最终被决心取代。</td><td style="text-align: left;">无</td><td style="text-align: left;">1</td><td style="text-align: left;">音乐停顿一秒</td></tr><tr><td style="text-align: left;">23</td><td style="text-align: left;">特写</td><td style="text-align: left;">俯拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">赵宇突然击打一下桌面。</td><tdstyle="text-align: left;">赵宇：<strong>“我明白了。最后一个模块的漏洞，我来补！”</strong></td><td style="text-align: left;">4</td><td style="text-align: left;">击桌声，音乐猛然响起，变得激昂、振奋</td></tr></tbody></table><h3 id="第四幕圆梦"><strong>第四幕：圆梦</strong></h3><ul><li><strong>场景</strong>：实验室和工厂场景通过灯光分区同时呈现。PPT背景分屏或快速切换。</li><li><strong>氛围</strong>： 喜悦、激动、自豪、成就感。</li></ul><table><colgroup><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /></colgroup><thead><tr><th style="text-align: left;">镜号</th><th style="text-align: left;">景别</th><th style="text-align: left;">角度</th><th style="text-align: left;">镜头运动</th><th style="text-align: left;">画面内容</th><th style="text-align: left;">台词/字幕</th><th style="text-align: left;">时长(秒)</th><th style="text-align: left;">音乐/音效</th></tr></thead><tbody><tr><td style="text-align: left;">24</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">舞台左侧实验室：李明、赵宇、陈曦等人专注地同步敲击键盘。PPT背景显示编程界面滚动。舞台右侧工厂：PPT背景显示设备恢复正常运行数据图。工厂组成员欢呼。</td><tdstyle="text-align: left;">密集的键盘敲击声（左侧），工厂设备启动运行的音效（右侧）</td><td style="text-align: left;">8</td><td style="text-align: left;">背景音乐节奏感强，充满活力</td></tr><tr><td style="text-align: left;">25</td><td style="text-align: left;">中景（左）</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">同学E激动地跳起来。</td><tdstyle="text-align: left;">同学E：<strong>“成功了！系统适配完成，工厂的设备正常运转了！”</strong></td><td style="text-align: left;">5</td><td style="text-align: left;">音乐达到一个小高潮</td></tr><tr><td style="text-align: left;">26</td><td style="text-align: left;">中景（右）</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><td style="text-align: left;">同学F兴奋地和其他同学击掌。</td><tdstyle="text-align: left;">同学F：<strong>“太好了，我们的努力没有白费！”</strong></td><td style="text-align: left;">4</td><td style="text-align: left;">欢呼声，放班歌</td></tr><tr><td style="text-align: left;">27</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><tdstyle="text-align: left;">实验室和工厂的人们都露出自豪的笑容。王教授欣慰地看着大家。</td><tdstyle="text-align: left;">王教授：<strong>（微笑）“大家用技术解决了实际问题，用行动证明了自己的责任感，我为你们所有人感到自豪。这就是新时代软件学子的担当！”</strong></td><td style="text-align: left;">14</td><td style="text-align: left;">音乐变得辉煌、宏大</td></tr><tr><td style="text-align: left;">28</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">拉远</td><tdstyle="text-align: left;">全体演员走到舞台中央，排列整齐，面向观众。灯光打亮。</td><td style="text-align: left;">无</td><td style="text-align: left;">5</td><td style="text-align: left;">继续班歌</td></tr><tr><td style="text-align: left;">29</td><td style="text-align: left;">全景</td><td style="text-align: left;">平拍</td><td style="text-align: left;">固定</td><td style="text-align: left;"><strong>全体谢幕并齐唱班歌。</strong></td><td style="text-align: left;">（班歌歌词）</td><td style="text-align: left;">30+</td><td style="text-align: left;">班歌音乐响亮，充满激情</td></tr></tbody></table><hr />]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM 模板</title>
      <link href="/2025/10/13/ACM-%E6%A8%A1%E6%9D%BF/"/>
      <url>/2025/10/13/ACM-%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="快速幂">1.快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fastPowMod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> base, <span class="type">long</span> <span class="type">long</span> power, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    base = base % mod; <span class="comment">// 先取模防止溢出</span></span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            result = (result * base) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分数组">2.差分数组</h3><ul><li>一维</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>; <span class="comment">// 根据题目要求调整大小</span></span><br><span class="line"><span class="type">int</span> a[N];    <span class="comment">// 原数组</span></span><br><span class="line"><span class="type">int</span> diff[N]; <span class="comment">// 差分数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化差分数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_diff</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    diff[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        diff[i] = a[i] - a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给区间 [l, r] 增加 val</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    diff[l] += val;</span><br><span class="line">    <span class="keyword">if</span> (r + <span class="number">1</span> &lt; N) &#123; <span class="comment">// 防止越界</span></span><br><span class="line">        diff[r<span class="number">+1</span>] -= val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算操作后的原数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">restore</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = a[i<span class="number">-1</span>] + diff[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二维</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1010</span>, N = <span class="number">1010</span>; <span class="comment">// 根据题目要求调整大小</span></span><br><span class="line"><span class="type">int</span> a[M][N];    <span class="comment">// 原矩阵</span></span><br><span class="line"><span class="type">int</span> diff[M][N]; <span class="comment">// 差分矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化差分矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_diff_2d</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            diff[i][j] = a[i][j] - a[i<span class="number">-1</span>][j] - a[i][j<span class="number">-1</span>] + a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给子矩阵 (x1,y1)到(x2,y2) 增加 val</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_2d</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    diff[x1][y1] += val;</span><br><span class="line">    diff[x2<span class="number">+1</span>][y1] -= val;</span><br><span class="line">    diff[x1][y2<span class="number">+1</span>] -= val;</span><br><span class="line">    diff[x2<span class="number">+1</span>][y2<span class="number">+1</span>] += val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算操作后的原矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">restore_2d</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            a[i][j] = a[i<span class="number">-1</span>][j] + a[i][j<span class="number">-1</span>] - a[i<span class="number">-1</span>][j<span class="number">-1</span>] + diff[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="背包">3.01背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1000</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,f[MAXN][MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t,v;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i].t&gt;&gt;a[i].v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];  <span class="comment">// 默认不选当前物品</span></span><br><span class="line">            <span class="comment">// 如果当前容量可以放下当前物品，考虑选择它的情况</span></span><br><span class="line">            <span class="keyword">if</span>(j&gt;=a[i].t) f[i][j]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j-a[i].t]+a[i].v,f[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,f[n][i]);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包">4.完全背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">20010</span>;</span><br><span class="line"><span class="type">int</span> m,n,f[MAXN],g[MAXN],a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));<span class="comment">// 最少硬币数初始化为无穷大（表示不可达）</span></span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(g));<span class="comment">// 最多硬币数初始化为负无穷大（表示不可达）</span></span><br><span class="line">    f[<span class="number">0</span>]=g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=a[j]) </span><br><span class="line">            &#123;</span><br><span class="line">                f[i]=<span class="built_in">min</span>(f[i-a[j]]<span class="number">+1</span>,f[i]);<span class="comment">// 更新最少硬币数</span></span><br><span class="line">                g[i]=<span class="built_in">max</span>(g[i-a[j]]<span class="number">+1</span>,g[i]);<span class="comment">// 更新最多硬币数</span></span><br><span class="line">            &#125;</span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl&lt;&lt;g[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包1维数组">5.多重背包（1维数组）</h3><ul><li>转换成01背包 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,v,w,mm,f[<span class="number">40010</span>],cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,w;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w&gt;&gt;mm;</span><br><span class="line">        <span class="comment">// 二进制拆分：将数量mm拆分为1, 2, 4, ..., 剩余部分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=mm;k*=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++cnt].v=v*k;<span class="comment">// 拆分后的物品价值 = 原价值 * 拆分数量</span></span><br><span class="line">            a[cnt].w=w*k;<span class="comment">// 拆分后的物品重量 = 原重量 * 拆分数量</span></span><br><span class="line">            mm-=k; <span class="comment">// 减去已拆分的数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理剩余部分（无法用2的幂次表示的部分）</span></span><br><span class="line">        a[++cnt].v=v*mm;</span><br><span class="line">        a[cnt].w=w*mm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 动态规划：01背包求解</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=a[i].w) f[j]=<span class="built_in">max</span>(f[j],f[j-a[i].w]+a[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="区间dp石子合并环形">6.区间dp（石子合并（环形））</h3><ul><li>非环形，即去掉2倍部分</li><li>环形，第一重循环的i，j差无需到2*n</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n,f[MAXN][MAXN],a[MAXN],sum[MAXN],g[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));<span class="comment">// 初始化f数组为极大值（因为要求最小值）</span></span><br><span class="line">    <span class="comment">// 输入石子重量并进行环形扩展</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        a[i+n]=a[i]; <span class="comment">// 环形扩展：将数组复制一份接在后面</span></span><br><span class="line">        f[i][i]=f[i+n][i+n]=<span class="number">0</span>;<span class="comment">// 单堆石子不需要合并，代价为0</span></span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 计算前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;n;l++) <span class="comment">// l表示区间长度，从1到n-1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>-l;i++)<span class="comment">// i表示区间起点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=i+l; <span class="comment">// j表示区间终点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++) <span class="comment">// k表示分割点</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j],f[i][k]+f[k<span class="number">+1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);<span class="comment">// 更新最小合并代价</span></span><br><span class="line">                g[i][j]=<span class="built_in">max</span>(g[i][j],g[i][k]+g[k<span class="number">+1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);<span class="comment">// 更新最大合并代价</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ans1=<span class="number">0x3f3f3f3f</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历所有可能的起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans1=<span class="built_in">min</span>(ans1,f[i][i+n<span class="number">-1</span>]);</span><br><span class="line">        ans2=<span class="built_in">max</span>(ans2,g[i][i+n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans1&lt;&lt;endl&lt;&lt;ans2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树">7.线段树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxn 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[Maxn],n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l,r,sum,lz;</span><br><span class="line">&#125;tree[Maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">//建树 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[i].l=l;</span><br><span class="line">    tree[i].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid<span class="number">+1</span>,r);</span><br><span class="line">    tree[i].sum=tree[i&lt;&lt;<span class="number">1</span>].sum+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单点加</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i,<span class="type">long</span> <span class="type">long</span> dis,<span class="type">long</span> <span class="type">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l==tree[i].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis&lt;=tree[i&lt;&lt;<span class="number">1</span>].r) <span class="built_in">update</span>(i&lt;&lt;<span class="number">1</span>,dis,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,dis,k);</span><br><span class="line">    tree[i].sum=tree[i&lt;&lt;<span class="number">1</span>].sum+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新lz</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].lz!=<span class="number">0</span>) <span class="comment">// 如果当前节点有未处理的延迟标记</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[i&lt;&lt;<span class="number">1</span>].lz+=tree[i].lz;</span><br><span class="line"><span class="comment">// 1. 将延迟标记传递给左子节点</span></span><br><span class="line">        tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lz+=tree[i].lz;</span><br><span class="line"><span class="comment">// 2. 将延迟标记传递给右子节点</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mid=(tree[i].l+tree[i].r)/<span class="number">2</span>;</span><br><span class="line">        tree[i&lt;&lt;<span class="number">1</span>].sum+=tree[i].lz*(mid-tree[i&lt;&lt;<span class="number">1</span>].l<span class="number">+1</span>);</span><br><span class="line">    <span class="comment">// 3. 更新左子节点的区间和（加上延迟标记值×左子区间长度）</span></span><br><span class="line">        tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+=tree[i].lz*(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-mid);</span><br><span class="line">    <span class="comment">// 4. 更新右子节点的区间和（加上延迟标记值×右子区间长度）</span></span><br><span class="line">        tree[i].lz=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 5. 清除当前节点的延迟标记（已传递给子节点）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间加</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r,<span class="type">long</span> <span class="type">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum+=k*(tree[i].r-tree[i].l<span class="number">+1</span>);</span><br><span class="line">        tree[i].lz+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(i);<span class="comment">// 需要访问子节点，先下传当前节点的延迟标记</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>].r&gt;=l) <span class="built_in">add</span>(i&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l&lt;=r) <span class="built_in">add</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    tree[i].sum=tree[i&lt;&lt;<span class="number">1</span>].sum+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间查询 </span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i,<span class="type">long</span> <span class="type">long</span> l,<span class="type">long</span> <span class="type">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l <span class="keyword">and</span> tree[i].r&lt;=r)</span><br><span class="line">        <span class="keyword">return</span> tree[i].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l <span class="keyword">or</span> tree[i].l&gt;r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushdown</span>(i);<span class="comment">// 需要访问子节点，先下传当前节点的延迟标记</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>].r&gt;=l) sum+=<span class="built_in">query</span>(i&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l&lt;=r) sum+=<span class="built_in">query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> l,r,k;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>,l,r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> l,r;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,l,r)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="dijkstra不可处理负权边负环">8.dijkstra（不可处理负权边、负环）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> head[MAXN];</span><br><span class="line"><span class="type">int</span> n,mm,s;</span><br><span class="line"><span class="type">bool</span> b[MAXN];</span><br><span class="line"><span class="type">int</span> d[MAXN],id;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s,v,lk;</span><br><span class="line">&#125;m[MAXN];</span><br><span class="line"><span class="comment">//邻接表加边</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id++;</span><br><span class="line">    m[id].v=v;</span><br><span class="line">    m[id].s=x;</span><br><span class="line">    m[id].lk=head[u];</span><br><span class="line">    head[u]=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f3f3f3f</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义小根堆（优先队列）：存储(距离, 节点)对，按距离从小到大排序</span></span><br><span class="line"><span class="comment">// 作用：高效获取当前距离源点最近的未处理节点（时间复杂度O(logn) per operation）</span></span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; &gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,u&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; t=q.<span class="built_in">top</span>();<span class="comment">// 取出队首元素（当前距离最小的节点信息）</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> v=t.second;</span><br><span class="line">        <span class="type">int</span> s=t.first;</span><br><span class="line">        <span class="keyword">if</span>(b[v]) <span class="keyword">continue</span>;<span class="comment">// 如果节点v已被处理过（最短距离已确定），跳过（避免重复处理）</span></span><br><span class="line">        b[v]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 遍历节点v的所有邻接边（通过邻接表）</span></span><br><span class="line">    <span class="comment">// 循环条件：i从v的邻接表表头开始，直到i=0（表示没有更多邻接边）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[v];i!=<span class="number">0</span>;i=m[i].lk)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=m[i].v;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;d[j]&lt;&lt;&#x27; &#x27;&lt;&lt;s&lt;&lt;&#x27; &#x27;&lt;&lt;m[i].s&lt;&lt;endl;// 松弛操作（Relaxation，Dijkstra算法的核心步骤）</span></span><br><span class="line">        <span class="comment">// 条件：通过v→j的路径，源点到j的距离比原来的d[j]更短</span></span><br><span class="line">            <span class="keyword">if</span>(d[j]&gt;s+m[i].s)</span><br><span class="line">            &#123;</span><br><span class="line">                d[j]=m[i].s+s;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mm&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=mm;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v,x;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;x;</span><br><span class="line">        <span class="built_in">add</span>(u,v,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dij</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;d[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spfa可处理负权边负环">9.SPFA（可处理负权边、负环）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,mm,s,d[MAXN],h[MAXN],cnt[MAXN];</span><br><span class="line"><span class="type">bool</span> b[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w,lk; <span class="comment">// u: 边的起点；v: 边的终点；w: 边的权值；lk: 下一条边的索引（邻接表链式存储）</span></span><br><span class="line">&#125;m[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mm&gt;&gt;s;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(d));<span class="comment">// 初始化距离数组为无穷大（0x3f是一个远大于图中可能路径长度的数）</span></span><br><span class="line">    d[s]=<span class="number">0</span>;<span class="comment">// 源点到自身的距离为0</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="built_in">sizeof</span>(h));<span class="comment">// 初始化邻接表表头为-1（表示所有节点初始时无邻接边）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=mm;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;m[i].u&gt;&gt;m[i].v&gt;&gt;m[i].w;<span class="comment">// 读入第i条边的起点u、终点v、权值w</span></span><br><span class="line">        m[i].lk=h[m[i].u];<span class="comment">// 将当前边的下一条边指向节点u原邻接表的表头</span></span><br><span class="line">        h[m[i].u]=i; <span class="comment">// 更新节点u的邻接表表头为当前边的索引（头插法插入新边）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// SPFA算法初始化：队列存储待处理的节点</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    b[s]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SPFA主循环：处理队列中的节点，松弛邻接边</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=h[q.<span class="built_in">front</span>()];</span><br><span class="line">        b[q.<span class="built_in">front</span>()]=<span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">pop</span>();          <span class="comment">// 弹出队首节点</span></span><br><span class="line">        <span class="comment">// 遍历节点u的所有邻接边（通过邻接表的链式结构）</span></span><br><span class="line">        <span class="keyword">while</span>(k!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 松弛操作：若通过u→v的路径能缩短源点到v的距离，则更新d[v]</span></span><br><span class="line">            <span class="keyword">if</span>(d[m[k].v]&gt;d[m[k].u]+m[k].w)</span><br><span class="line">            &#123;</span><br><span class="line">                d[m[k].v]=d[m[k].u]+m[k].w;</span><br><span class="line">                <span class="comment">// 若v不在队列中，则将其入队（避免重复处理）</span></span><br><span class="line">                <span class="keyword">if</span>(!b[m[k].v])</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt[m[k].v]++;</span><br><span class="line">                    q.<span class="built_in">push</span>(m[k].v);</span><br><span class="line">                    b[m[k].v]=<span class="number">1</span>;</span><br><span class="line">                     <span class="comment">// 若v的入队次数超过节点数n，说明存在负权环（最短路径不可</span></span><br><span class="line">                    <span class="keyword">if</span>(cnt[m[k].v]&gt;n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;负环&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历下一条边（通过lk指针访问邻接表的下一个节点）</span></span><br><span class="line">            k=m[k].lk;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出源点到所有节点的最短距离（若仍为0x3f则表示不可达）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;d[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bellman-ford">10.Bellman-Ford</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>; <span class="comment">// 定义无穷大（比一般整数大，避免溢出）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, mm, s; <span class="comment">// n:节点数，mm:边数，s:起点</span></span><br><span class="line"><span class="type">int</span> d[MAXN]; <span class="comment">// d[i]:起点s到i的最短距离</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u, v, w; <span class="comment">// 边的起点u、终点v、权值w（lk未使用，可保留）</span></span><br><span class="line">    <span class="type">int</span> lk; <span class="comment">// 邻接表指针（Bellman-Ford无需使用，可忽略）</span></span><br><span class="line">&#125; m[MAXN]; <span class="comment">// 存储所有边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; mm &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化距离数组：所有节点距离为INF，起点距离为0</span></span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入所有边（保留邻接表结构，但Bellman-Ford无需使用）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=mm; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; m[i].u &gt;&gt; m[i].v &gt;&gt; m[i].w;</span><br><span class="line">        m[i].lk = <span class="number">0</span>; <span class="comment">// 可省略，不影响结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ---------------------- Bellman-Ford核心逻辑 ----------------------</span></span><br><span class="line">    <span class="comment">// 1. 迭代n-1次，松弛所有边（最短路径最多含n-1条边）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> updated = <span class="literal">false</span>; <span class="comment">// 优化：若本次迭代无松弛，提前终止（可选）</span></span><br><span class="line">        <span class="comment">// 遍历所有边（直接遍历m数组，无需邻接表）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=mm; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = m[j].u;</span><br><span class="line">            <span class="type">int</span> v = m[j].v;</span><br><span class="line">            <span class="type">int</span> w = m[j].w;</span><br><span class="line">            <span class="comment">// 松弛条件：u可达（d[u]≠INF），且v的距离可通过u缩短</span></span><br><span class="line">            <span class="keyword">if</span> (d[u] != INF &amp;&amp; d[v] &gt; d[u] + w) </span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + w;</span><br><span class="line">                updated = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!updated) <span class="keyword">break</span>; <span class="comment">// 无松弛，提前终止（可选，提升效率）</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 检测负权环：若n-1次后仍能松弛，说明存在负环</span></span><br><span class="line">    <span class="type">bool</span> has_negative_cycle = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=mm; j++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = m[j].u;</span><br><span class="line">        <span class="type">int</span> v = m[j].v;</span><br><span class="line">        <span class="type">int</span> w = m[j].w;</span><br><span class="line">        <span class="keyword">if</span> (d[u] != INF &amp;&amp; d[v] &gt; d[u] + w) </span><br><span class="line">        &#123;</span><br><span class="line">            has_negative_cycle = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (has_negative_cycle) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;负环&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------------- Bellman-Ford核心逻辑结束 ----------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出最短距离（未到达的节点仍为INF）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) </span><br><span class="line">        cout &lt;&lt; (d[i] == INF ? <span class="string">&quot;INF&quot;</span> : <span class="built_in">to_string</span>(d[i])) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floyd">11.Floyd</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e3</span><span class="number">+10</span>; <span class="comment">// Floyd算法时间复杂度O(n³)，n建议≤1e3（否则超时）</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>; <span class="comment">// 表示不可达的距离（需大于所有边权之和）</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dist[MAXN][MAXN]; <span class="comment">// dist[i][j]：i到j的最短距离</span></span><br><span class="line"><span class="type">int</span> n, mm; <span class="comment">// n：节点数；mm：边数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 初始化距离矩阵</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist)); <span class="comment">// 初始化为INF</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dist[i][i] = <span class="number">0</span>; <span class="comment">// 自身到自身的距离为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 输入边（默认处理有向边，无向边需添加反向边）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=mm;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, x;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;x;</span><br><span class="line">        dist[u][v] = <span class="built_in">min</span>(dist[u][v], x); <span class="comment">// 处理重边（保留最小权值）</span></span><br><span class="line">        <span class="comment">// 若为无向边，需添加：dist[v][u] = min(dist[v][u], x);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Floyd-Warshall核心算法（通过中间点k松弛所有路径）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++) <span class="comment">// 中间点k（必须放在最外层）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">// 起点i</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="comment">// 终点j</span></span><br><span class="line">                <span class="keyword">if</span>(dist[i][k] != INF &amp;&amp; dist[k][j] != INF) <span class="comment">// 避免溢出（INF+INF会超界）</span></span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 输出所有节点对的最短距离（i到j的最短距离）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[i][j] == INF)</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;INF &quot;</span>; <span class="comment">// 可选：用特定符号表示不可达（如-1）</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;dist[i][j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl; <span class="comment">// 每行结束换行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络流最大流dicnic">12.网络流最大流（Dicnic）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">10000</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">210</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,s,t,u,v,w,cnt=<span class="number">-1</span>,head[MAXN],cur[MAXN],ans,deep[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll next,v,w;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"><span class="comment">//加边</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w,<span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].next=head[u];</span><br><span class="line">    edge[cnt].v=v;</span><br><span class="line">    <span class="keyword">if</span>(flag) edge[cnt].w=w;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DFS：寻找增广路</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(ll u,ll t,ll lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!lim || u==t) <span class="keyword">return</span> lim;<span class="comment">// 如果没有剩余流量或到达汇点，返回当前流量</span></span><br><span class="line">    ll flow=<span class="number">0</span>,f;<span class="comment">// flow记录当前点的总流量，f记录单次DFS的流量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=cur[u];i!=<span class="number">-1</span>;i=edge[i].next)<span class="comment">// 当前弧优化，从当前边开始遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        cur[u]=i;</span><br><span class="line">        <span class="keyword">if</span>(deep[edge[i].v]==deep[u]<span class="number">+1</span> &amp;&amp; (f=<span class="built_in">dfs</span>(edge[i].v,t,<span class="built_in">min</span>(lim,edge[i].w))))  <span class="comment">// 如果下一层是u的下一层且可以增广</span></span><br><span class="line">        &#123;</span><br><span class="line">            flow+=f;<span class="comment">// 累加流量</span></span><br><span class="line">            lim-=f;  <span class="comment">// 减少剩余流量</span></span><br><span class="line">            edge[i].w-=f;<span class="comment">// 更新正向边容量</span></span><br><span class="line">            edge[i^<span class="number">1</span>].w+=f;<span class="comment">// 更新反向边容量（异或1得到反向边索引）</span></span><br><span class="line">            <span class="keyword">if</span>(!lim) <span class="keyword">break</span>;<span class="comment">// 如果剩余流量为0，提前退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow; <span class="comment">// 返回当前点的总流量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS：构建分层图</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(ll s,ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(deep,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(deep));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cur[i]=head[i]; <span class="comment">// 重置当前弧</span></span><br><span class="line">    deep[s]=<span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);<span class="comment">// 源点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ll u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i!=<span class="number">-1</span>;i=edge[i].next)<span class="comment">// 遍历u的所有邻边</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(deep[edge[i].v]&gt;inf &amp;&amp; edge[i].w)<span class="comment">// 如果邻点未被访问且边有容量</span></span><br><span class="line">            &#123;</span><br><span class="line">                deep[edge[i].v]=deep[u]<span class="number">+1</span>;<span class="comment">// 设置邻点深度</span></span><br><span class="line">                q.<span class="built_in">push</span>(edge[i].v);   <span class="comment">// 邻点入队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[t]&lt;inf) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 如果汇点可达，返回true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dicnic</span><span class="params">(ll s,ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>(s,t)) ans+=<span class="built_in">dfs</span>(s,t,inf);<span class="comment">// 只要汇点可达，累加增广路的流量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="built_in">add</span>(u,v,w,<span class="number">1</span>);<span class="comment">// 添加正向边</span></span><br><span class="line">        <span class="built_in">add</span>(v,u,w,<span class="number">0</span>);<span class="comment">// 添加反向边（初始容量为0）</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=cnt;i++) </span></span><br><span class="line"><span class="comment">//cout&lt;&lt;edge[i].v&lt;&lt;&#x27; &#x27;&lt;&lt;edge[i].w&lt;&lt;&#x27; &#x27;&lt;&lt;edge[i].next&lt;&lt;endl;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dicnic</span>(s,t);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小费用最大流spfa">13.最小费用最大流（SPFA）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e3</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,s,t,u,v,f,d,maxflow,mincost,head[MAXN],vis[MAXN],dis[MAXN],pre[MAXN],cnt,flow[MAXN],last[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll next,v,flow,dis;</span><br><span class="line">&#125;edge[MAXM];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll f,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].next=head[u];</span><br><span class="line">    edge[cnt].v=v;</span><br><span class="line">    edge[cnt].flow=f;</span><br><span class="line">    edge[cnt].dis=d;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SPFA算法寻找最小费用增广路径</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(ll s,ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(flow,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(flow));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    queue&lt;ll&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);  <span class="comment">// 源点入队</span></span><br><span class="line">    vis[s]=<span class="number">1</span>;<span class="comment">// 标记已访问</span></span><br><span class="line">    dis[s]=<span class="number">0</span>;  <span class="comment">// 源点距离为0</span></span><br><span class="line">    pre[t]=<span class="number">-1</span>; <span class="comment">// 汇点前驱初始化为-1（用于判断是否找到路径）</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ll now=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[now]=<span class="number">0</span>;  <span class="comment">// 出队取消标记</span></span><br><span class="line">        <span class="comment">// 遍历当前节点的所有出边</span></span><br><span class="line">        <span class="keyword">for</span>(ll i=head[now];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若边有剩余容量且可松弛</span></span><br><span class="line">            <span class="keyword">if</span>(edge[i].flow&gt;<span class="number">0</span> &amp;&amp; dis[edge[i].v]&gt;dis[now]+edge[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[edge[i].v]=dis[now]+edge[i].dis;<span class="comment">// 更新距离</span></span><br><span class="line">                pre[edge[i].v]=now;  <span class="comment">// 记录前驱节点</span></span><br><span class="line">                last[edge[i].v]=i;      <span class="comment">// 记录边的编号</span></span><br><span class="line">                flow[edge[i].v]=<span class="built_in">min</span>(flow[now],edge[i].flow);<span class="comment">// 更新可增广流量</span></span><br><span class="line">                <span class="comment">// 若目标节点未入队，则入队</span></span><br><span class="line">                <span class="keyword">if</span>(!vis[edge[i].v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[edge[i].v]=<span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(edge[i].v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MCMF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>(s,t))  <span class="comment">// 当存在增广路径时</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll now=t;</span><br><span class="line">        maxflow+=flow[t];  <span class="comment">// 更新总流量</span></span><br><span class="line">        mincost+=flow[t]*dis[t]; <span class="comment">// 更新总费用（流量*路径单位费用和）</span></span><br><span class="line">        <span class="comment">// 回溯更新路径上的边流量</span></span><br><span class="line">        <span class="keyword">while</span>(now!=s)</span><br><span class="line">        &#123;</span><br><span class="line">            edge[last[now]].flow-=flow[t];</span><br><span class="line">            <span class="comment">// 正向边减去增广流量</span></span><br><span class="line">            edge[last[now]^<span class="number">1</span>].flow+=flow[t];</span><br><span class="line">            <span class="comment">// 反向边增加增广流量（用于回退）</span></span><br><span class="line">            now=pre[now];<span class="comment">// 移动到前驱节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;f&gt;&gt;d;</span><br><span class="line">        <span class="built_in">add</span>(u,v,f,d);</span><br><span class="line">        <span class="built_in">add</span>(v,u,<span class="number">0</span>,-d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MCMF</span>();</span><br><span class="line">    cout&lt;&lt;maxflow&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;mincost&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列">14.单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="type">int</span> n,k,a[N];</span><br><span class="line"><span class="type">int</span> ans1[N],ans2[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N],head,tail;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calc</span><span class="params">(<span class="type">int</span> res[])</span> <span class="comment">//指针传参，答案计入 res 数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head=<span class="number">1</span>,tail=<span class="number">0</span>; <span class="comment">//清空队列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//枚举窗口右端</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span>(head&lt;=tail &amp;&amp; i-q[head]<span class="number">+1</span>&gt;k) q[head++]=<span class="number">0</span>; <span class="comment">//弹出已经离开窗口的元素</span></span><br><span class="line">      <span class="keyword">while</span>(head&lt;=tail &amp;&amp; a[q[tail]]&gt;a[i]) q[tail--]=<span class="number">0</span>; <span class="comment">//从队尾踢掉之前所有比当前元素大的数</span></span><br><span class="line">      q[++tail]=i; <span class="comment">//当前元素自己加入队尾</span></span><br><span class="line">      <span class="keyword">if</span>(i&gt;=k) res[i-k<span class="number">+1</span>]=q[head]; <span class="comment">//完成以上操作后，队头即为最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Calc</span>(ans1); <span class="comment">//计算滑动窗口最小值位置，答案计入 ans1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-k<span class="number">+1</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[ans1[i]]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]=-a[i]; <span class="comment">//所有元素取相反数</span></span><br><span class="line">    <span class="built_in">Calc</span>(ans2); <span class="comment">//计算此时的滑动窗口最小值位置，答案计入 ans2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-k<span class="number">+1</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,-a[ans2[i]]); <span class="comment">//再取一遍相反数即为最大值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树的直径">15.树的直径</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">4</span>*<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[MAXN],cnt,head[MAXN];</span><br><span class="line"><span class="type">bool</span> b[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,lk;</span><br><span class="line">&#125;edge[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].v=v;</span><br><span class="line">    edge[cnt].lk=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一次BFS：从指定起点找到最远节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs1</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[u]=<span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=q.<span class="built_in">front</span>(); <span class="comment">// 当前节点</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 遍历当前节点的所有邻居</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[v];i!=<span class="number">0</span>;i=edge[i].lk)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> w=edge[i].v;<span class="comment">// 邻居节点</span></span><br><span class="line">            <span class="keyword">if</span>(b[w]==<span class="number">0</span>) <span class="comment">// 如果邻居未访问过</span></span><br><span class="line">            &#123;</span><br><span class="line">                b[w]=<span class="number">1</span>;</span><br><span class="line">                a[w]=a[v]<span class="number">+1</span>;<span class="comment">// 更新距离（从起点u到w的距离）</span></span><br><span class="line">                q.<span class="built_in">push</span>(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxid=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 查找距离最大的节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;maxx)</span><br><span class="line">        &#123;</span><br><span class="line">            maxx=a[i];</span><br><span class="line">            maxid=i; <span class="comment">// 记录距离最大的节点ID</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxid;<span class="comment">// 返回距离最远的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次BFS：从第一次找到的最远节点出发，计算树的直径</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs2</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));<span class="comment">// 重置距离数组</span></span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));<span class="comment">// 重置访问标记</span></span><br><span class="line">    b[u]=<span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[v];i!=<span class="number">0</span>;i=edge[i].lk)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> w=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(b[w]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b[w]=<span class="number">1</span>;</span><br><span class="line">                a[w]=a[v]<span class="number">+1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxid=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 直接返回最大距离（树的直径）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;maxx)</span><br><span class="line">        &#123;</span><br><span class="line">            maxx=a[i];</span><br><span class="line">            maxid=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 返回树的直径长度</span></span><br><span class="line">    <span class="keyword">return</span> maxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        <span class="built_in">add</span>(u,v);</span><br><span class="line">        <span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> v=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> u=<span class="built_in">bfs1</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">bfs2</span>(u);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stl">16.STL</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、vector容器（向量）</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>简介</span><br><span class="line">    vector是将元素置于一个动态数组中加以管理的容器</span><br><span class="line">    vector可以随机存取元素（支持索引值直接存取，用[]操作符或<span class="built_in">at</span>()的方法）</span><br><span class="line">    vector尾部添加或移除元素非常快速，但是中部或头部插入或移除元素比较费时</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>vector对象的默认构造</span><br><span class="line">    vector采用模板类实现，vector对象的默认构造形式</span><br><span class="line"></span><br><span class="line">    vector&lt;T&gt; vecT;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecInt;<span class="comment">//一个存放int类型元素的vector容器</span></span><br><span class="line">    vector&lt;<span class="type">float</span>&gt;vecFloat;<span class="comment">//一个存放float类型元素的vector容器</span></span><br><span class="line">    vector&lt;string&gt;vecString;<span class="comment">//一个存放string类型元素的vector容器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CA</span>&#123;&#125;;</span><br><span class="line">    vector&lt;CA*&gt; vecpCA;<span class="comment">//用于存放类CA的指针的vector容器</span></span><br><span class="line">    vector&lt;CA&gt; vecCA;<span class="comment">//用于存放类CA的vector容器</span></span><br><span class="line">                            <span class="comment">//所以此时CA必须提供CA的拷贝构造函数，以保证CA对象之间拷贝正常</span></span><br><span class="line"></span><br><span class="line">    vec.<span class="built_in">size</span>(); <span class="comment">//返回vector容器中元素的个数</span></span><br><span class="line">    vec.<span class="built_in">empty</span>(); <span class="comment">//判断vector容器是否为空</span></span><br><span class="line">    vec.<span class="built_in">resize</span>(num, elem); <span class="comment">//重新指定容器的长度为num。若容器变长，则以elem值重新填充新位置；若容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line">    vec[idx]; <span class="comment">//返回下标(索引)idx所指的数据，越界时，运行直接报错</span></span><br><span class="line">    vec.<span class="built_in">at</span>(idx); <span class="comment">//返回下标(索引)idx所指的数据，如果idx越界，抛出异常终止的原因（程序仍然会异常终止）</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(num); <span class="comment">//在vec的末尾插入一个num元素</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>(); <span class="comment">//删除vec的末尾的一个元素</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(pos, elem); <span class="comment">//在pos位置插入一个elem元素，返回新数据的位置</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(pos, n, elem); <span class="comment">//在pos位置插入n个elem元素，无返回值</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(pos, beg, end); <span class="comment">//在pos位置插入[beg, end)区间的数据，无返回值</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator iter; <span class="comment">//迭代器变量名为iter</span></span><br><span class="line">    it = v<span class="number">1.</span><span class="built_in">begin</span>();</span><br><span class="line">    <span class="comment">//输出此时的it指向的元素</span></span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//通过循环使用迭代器遍历v1容器中的所有元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = v<span class="number">1.</span><span class="built_in">begin</span>(); it != v<span class="number">1.</span><span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、deque容器（双端队列）</span><br><span class="line"></span><br><span class="line">    deque是<span class="string">&quot;double-ended queue&quot;</span>的缩写，和vector一样都是STL的容器</span><br><span class="line">    deque是双端数组而vector是单端的</span><br><span class="line">    deque在接口上和vector非常相似，在许多操作的地方可以直接替换</span><br><span class="line">    deque可以随机存取元素（支持索引值直接存取，用[ ]操作符或<span class="built_in">at</span>( )方法）</span><br><span class="line">    deque头部和尾部添加或移除元素都非常快速。但是在中部安插元素或移除元素比较费时</span><br><span class="line">    需要使用头文件<span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line">    包含victor的所有函数</span><br><span class="line">    deque.<span class="built_in">push_front</span>(elem);<span class="comment">//在容器头部插入一个数据</span></span><br><span class="line">    deque.<span class="built_in">pop_front</span>();<span class="comment">//删除容器的第一个数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、stack容器（栈）</span><br><span class="line"><span class="number">1.</span>stack对象的默认构造</span><br><span class="line">    stack采用模板类实现，stack对象的默认构造形式为：stack&lt;T&gt; s;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s; <span class="comment">//一个存放int的stack容器</span></span><br><span class="line">    stack&lt;<span class="type">float</span>&gt; s; <span class="comment">//一个存放float的stack容器</span></span><br><span class="line">    stack&lt;string&gt; s; <span class="comment">//一个存放string的stack容器</span></span><br><span class="line"><span class="number">2.</span>stack常用的成员函数</span><br><span class="line">    stack.<span class="built_in">push</span>(elem) <span class="comment">//在栈顶增加元素（入栈）</span></span><br><span class="line">    stack.<span class="built_in">pop</span>( ) <span class="comment">//移除栈顶元素（出栈）</span></span><br><span class="line">    stack.<span class="built_in">empty</span>( ) <span class="comment">//堆栈为空则返回真</span></span><br><span class="line">    stack.<span class="built_in">size</span>( ) <span class="comment">//返回栈中元素数目</span></span><br><span class="line">    stack.<span class="built_in">top</span>( ) <span class="comment">//返回栈顶元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、queue容器（队列）</span><br><span class="line">    queue是队列容器，是一种“先进先出”的容器</span><br><span class="line">    需要使用头文件<span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="number">1.</span>queue对象的默认构造</span><br><span class="line">    queue采用模板类，queue对象的默认构造形式：queue&lt;T&gt; q;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; queInt;<span class="comment">//一个存放int的queue容器</span></span><br><span class="line">    queue&lt;<span class="type">float</span>&gt; queFloat;<span class="comment">//一个存放float的queue容器</span></span><br><span class="line">    queue&lt;string&gt; queString;<span class="comment">//一个存放string的queue容器</span></span><br><span class="line"><span class="number">2.</span>queue容器的常用成员函数</span><br><span class="line">    queue.<span class="built_in">push</span>(elem) <span class="comment">//在队列尾部增加元素（入队）</span></span><br><span class="line">    queue.<span class="built_in">pop</span>( ) <span class="comment">//删除队首元素（出队）</span></span><br><span class="line">    queue.<span class="built_in">empty</span>( ) <span class="comment">//队列为空则返回真</span></span><br><span class="line">    queue.<span class="built_in">size</span>( ) <span class="comment">//返回队列中元素数目</span></span><br><span class="line">    queue.<span class="built_in">front</span>( ) <span class="comment">//返回队首元素（可以作为左值被修改）</span></span><br><span class="line">    queue.<span class="built_in">back</span>( ) <span class="comment">//返回队尾元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、list容器（双向链表）</span><br><span class="line"><span class="number">1.</span>基本概念</span><br><span class="line">    list是一个双向链表容器，可高效地进行插入和删除元素</span><br><span class="line">    list不可以随机存取元素，所以不支持at.(pos)函数与[]操作符</span><br><span class="line">    it++ <span class="comment">//迭代器自增、自减是正确的</span></span><br><span class="line">    it<span class="number">+5</span> <span class="comment">//迭代器一次移动多个是错误的</span></span><br><span class="line"><span class="number">2.l</span>ist容器的头部和尾部操作</span><br><span class="line">    list采用模板类实现，对象的默认构造形式：list&lt;T&gt; lst，例如：</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; lstInt;<span class="comment">//定义一个存放int的list容器</span></span><br><span class="line">    list&lt;<span class="type">float</span>&gt; lstFloat;<span class="comment">//定义一个存放float的list容器</span></span><br><span class="line">    list&lt;string&gt; lstString;<span class="comment">//定义一个存放string的list容器</span></span><br><span class="line"></span><br><span class="line">    list.<span class="built_in">push_back</span>(elem); <span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line">    list.<span class="built_in">pop_back</span>( ); <span class="comment">//删除容器中最后一个元素</span></span><br><span class="line">    list.<span class="built_in">push_front</span>(elem); <span class="comment">//在容器头部加入一个元素</span></span><br><span class="line">    list.<span class="built_in">pop_front</span>( ); <span class="comment">//删除容器中第一个元素</span></span><br><span class="line">    list.<span class="built_in">begin</span>();<span class="comment">//返回容器中第一个元素的迭代器</span></span><br><span class="line">    list.<span class="built_in">end</span>();<span class="comment">//返回容器中最后一个元素之后的迭代器</span></span><br><span class="line">    list.<span class="built_in">rbegin</span>();<span class="comment">//返回容器中倒数第一个元素的迭代器</span></span><br><span class="line">    list.<span class="built_in">rend</span>();<span class="comment">//返回容器中倒数最后一个元素的后面的迭代器</span></span><br><span class="line">    <span class="built_in">list</span>(n,elem); <span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line">    <span class="built_in">list</span>(beg,end); <span class="comment">//构造函数将[beg,end)区间中的元素拷贝给本身</span></span><br><span class="line">    <span class="built_in">list</span>(<span class="type">const</span> list &amp;lst); <span class="comment">//拷贝构造函数</span></span><br><span class="line">    list.<span class="built_in">assign</span>(beg,end); <span class="comment">//将[beg,end)区间中的数据拷贝赋值给本身</span></span><br><span class="line">    list.<span class="built_in">assign</span>(n,elem); <span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">    list&amp; <span class="keyword">operator</span> = (<span class="type">const</span> list &amp;lst); <span class="comment">//重载等号操作符</span></span><br><span class="line">    list.<span class="built_in">swap</span>(lst); <span class="comment">//交换两个头指针的位置，类似于交换元素</span></span><br><span class="line">(<span class="number">1</span>)专用成员函数</span><br><span class="line">    <span class="built_in">merge</span>(b)：将链表b与调用链表合并，在合并之前，两个链表必须已经排序，合并后经过排序的链表被保存在调用链表中，b为空。</span><br><span class="line">    <span class="built_in">remove</span>(val)：从链表中删除val的所有节点。</span><br><span class="line">    <span class="built_in">splice</span>(pos,b)：将链表b的内容插入pos的前面，b为空。</span><br><span class="line">    <span class="built_in">reverse</span>( )：将链表翻转。</span><br><span class="line">    <span class="built_in">sort</span>( )：将链表排序。</span><br><span class="line">    <span class="built_in">unique</span>( )：将连续的相同元素压缩为单个元素。不连续的相同元素无法压缩，因此一般先排序后去重。</span><br><span class="line">(<span class="number">2</span>)其他成员函数</span><br><span class="line">    <span class="built_in">push_front</span>(x)/<span class="built_in">push_back</span>(x)：x从链表头或尾入。</span><br><span class="line">    <span class="built_in">pop_front</span>( )/<span class="built_in">pop_back</span>( )：从链表头或尾出。</span><br><span class="line">    <span class="built_in">front</span>( )/<span class="built_in">back</span>( )：返回链表头或尾元素。</span><br><span class="line">    <span class="built_in">insert</span>(p, t)：在p之前插入t。</span><br><span class="line">    <span class="built_in">erase</span>(p)：删除p。</span><br><span class="line">    <span class="built_in">clear</span>( )：清空链表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、set/multiset容器（集合）</span><br><span class="line"><span class="number">1.</span>set/multiset容器的基本概念</span><br><span class="line">    set是一个集合容器，其中所包含的元素是唯一的，集合中的元素按一定的顺序排列。元素插入过程是按排序规则插入，所以不能指定插入位置</span><br><span class="line">    set采用红黑树变体的数据结构实现，红黑树属于平衡二叉树。在插入操作和删除操作上比vector快</span><br><span class="line">    set不可以直接存取元素（不可以使用at.(pos)与[ ]操作符）</span><br><span class="line">    multiset与set的区别：set支持唯一键值，每个元素值只能出现一次；而multiset中同一值可以出现多次</span><br><span class="line">    不可以直接修改set或multiset容器中的元素值，因为该类容器是自动排序的。如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素</span><br><span class="line">    set或multiset的迭代器为双向访问，不支持随机访问。执行一次“++”和“- -”操作的时间复杂度均为<span class="built_in">O</span>(logn)。默认的元素顺序为升序，也可以通过第<span class="number">2</span>个模版的参数设置为降序</span><br><span class="line"><span class="number">2.</span>set容器的插入和迭代器</span><br><span class="line">    set.<span class="built_in">insert</span>(elem); <span class="comment">//在容器中插入元素</span></span><br><span class="line">    set.<span class="built_in">begin</span>( ); <span class="comment">//返回容器中第一个数据的迭代器</span></span><br><span class="line">    set.<span class="built_in">end</span>( ); <span class="comment">//返回容器中最后一个数据之后的迭代器</span></span><br><span class="line">    set.<span class="built_in">rbegin</span>( ); <span class="comment">//返回容器中倒数第一个元素的迭代器</span></span><br><span class="line">    set.<span class="built_in">rend</span>( ); <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器</span></span><br><span class="line"><span class="number">3.</span>set的成员函数</span><br><span class="line">    size/empty/clear：元素个数、判空、清空</span><br><span class="line">    begin/end：开始位置和结束位置</span><br><span class="line">    <span class="built_in">insert</span>(x)：将元素x插入集合</span><br><span class="line">    <span class="built_in">erase</span>(x)：删除所有等于x的元素</span><br><span class="line">    <span class="built_in">erase</span>(it)：删除it迭代器指向的元素</span><br><span class="line">    <span class="built_in">find</span>(x)：查找元素x在集合中的位置，若不存在，则返回<span class="function">end</span></span><br><span class="line"><span class="function">    <span class="title">count</span><span class="params">(x)</span>：统计等于x的元素个数</span></span><br><span class="line"><span class="function">    <span class="title">lower_bound</span><span class="params">(x)</span>/<span class="title">upper_bound</span><span class="params">(x)</span>：返回大于或等于x的最小元素位置、大于x的最小元素位置</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7、map容器（映射）</span></span><br><span class="line"><span class="function">1.map的基本概念</span></span><br><span class="line"><span class="function">​ map的键和值可以是不同的类型，键是唯一的，每个键都对应一个值。map可被当作哈希表使用，它建立了从键（关键字）到值的映射。map是键和值的一一映射</span></span><br><span class="line"><span class="function">2.map的成员函数</span></span><br><span class="line"><span class="function">    size/empty/clear：元素个数、判空、清空</span></span><br><span class="line"><span class="function">    begin/end：开始位置和结束位置</span></span><br><span class="line"><span class="function">    <span class="title">insert</span><span class="params">(x)</span>：将元素x插入集合（x为二元组）</span></span><br><span class="line"><span class="function">    <span class="title">erase</span><span class="params">(x)</span>：删除所有等于x的元素（x为二元组）</span></span><br><span class="line"><span class="function">    <span class="title">erase</span><span class="params">(it)</span>：删除it指向的元素（it为指向二元组的迭代器）</span></span><br><span class="line"><span class="function">    <span class="title">find</span><span class="params">(k)</span>：查找键位k的二元组的位置，若不存在，则返回尾指针</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1257 平面上的最接近点对 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1257-%E5%B9%B3%E9%9D%A2%E4%B8%8A%E7%9A%84%E6%9C%80%E6%8E%A5%E8%BF%91%E7%82%B9%E5%AF%B9-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1257-%E5%B9%B3%E9%9D%A2%E4%B8%8A%E7%9A%84%E6%9C%80%E6%8E%A5%E8%BF%91%E7%82%B9%E5%AF%B9-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>因为题目范围是 <span class="math inline">10000</span>，所以我们枚举两个点，求他的距离。时间复杂度是 <spanclass="math inline"><em>O</em>(<em>n</em><sup>2</sup>)</span>这样是不行的，但因为由 <spanclass="math inline"><em>i</em> = <em>x</em></span> 点，<spanclass="math inline"><em>j</em> = <em>y</em></span> 点 与 <spanclass="math inline"><em>i</em> = <em>y</em></span> 点，<spanclass="math inline"><em>j</em> = <em>x</em></span>点是一样的，所以只要把枚举压缩一下，九个一得到时间复杂度为 <spanclass="math inline"><em>O</em>(<em>n</em>(<em>n</em> − 1)/2)</span>的算法，是可以通过的。</p><h2 id="枚举代码">枚举代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">minn=<span class="built_in">min</span>(minn,<span class="built_in">sqrt</span>((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));<span class="comment">//x[i]是第i个点的x坐标，y[i]是滴i个点的y坐标。</span></span><br></pre></td></tr></table></figure><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">double</span> minn=<span class="number">2147483647</span>,x[<span class="number">10010</span>],y[<span class="number">10010</span>];<span class="comment">//因为输出的是小数，所以我们要用double类型存储。</span></span><br><span class="line"><span class="type">int</span> n,cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">minn=<span class="built_in">min</span>(minn,<span class="built_in">sqrt</span>((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])));<span class="comment">//计算距离并与之前的取最小值。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>,minn);<span class="comment">//输出保留四位。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P3879 [TJOI2010]阅读理解 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P3879-TJOI2010-%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P3879-TJOI2010-%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>题目要求在很多的语段中查找是否存在某一个单词，输语段的编号。</p><h2 id="思路">思路</h2><p>只需要用 <spanclass="math inline"><em>s</em><em>e</em><em>t</em></span>来判断是否存在即可。</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,l,m;</span><br><span class="line">string x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;string&gt; q[<span class="number">1010</span>];定义set</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=l;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            q[i].<span class="built_in">insert</span>(x); <span class="comment">//加入语段</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(q[j].<span class="built_in">count</span>(x)&gt;<span class="number">0</span>) cout&lt;&lt;j&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//判断存在并输出</span></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1125 笨小猴 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1125-%E7%AC%A8%E5%B0%8F%E7%8C%B4-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1125-%E7%AC%A8%E5%B0%8F%E7%8C%B4-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>读入，处理 <spanclass="math inline"><em>m</em><em>a</em><em>x</em><em>n</em></span> 和<spanclass="math inline"><em>m</em><em>i</em><em>n</em><em>n</em></span>，一个判断（筛表法） <spanclass="math inline"><em>m</em><em>a</em><em>x</em><em>x</em> − <em>m</em><em>i</em><em>n</em><em>n</em></span>是不是质数，再进行输出。</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">101</span>],sum[<span class="number">101</span>],k;</span><br><span class="line"><span class="type">bool</span> c[<span class="number">101</span>];</span><br><span class="line"><span class="type">bool</span> f[<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>                      </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">f[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">f[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=<span class="number">200</span>/i;j++)</span><br><span class="line">f[i*j]=<span class="literal">true</span>;</span><br><span class="line">&#125;<span class="comment">//筛表</span></span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">b[i<span class="number">+1</span>]=s[i];  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)<span class="comment">//遍历字符串</span></span><br><span class="line">      <span class="keyword">if</span>(c[b[i]]==<span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=len;j++)</span><br><span class="line">         <span class="keyword">if</span>(b[i]==b[j]) </span><br><span class="line">          sum[i]++;                       </span><br><span class="line">        c[b[i]]=<span class="number">1</span>; </span><br><span class="line">        k++;    </span><br><span class="line">       &#125;<span class="comment">//统计maxn和minn。sum[1]是maxn，sum[2]是minn。</span></span><br><span class="line"><span class="built_in">sort</span>(sum<span class="number">+1</span>,sum<span class="number">+1</span>+len,cmp);</span><br><span class="line"><span class="keyword">if</span>(f[sum[<span class="number">1</span>]-sum[k]]==<span class="literal">false</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Lucky Word&quot;</span>&lt;&lt;endl&lt;&lt;sum[<span class="number">1</span>]-sum[k];</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No Answer&quot;</span>&lt;&lt;endl&lt;&lt;<span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//输出</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P5016 龙虎斗 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P5016-%E9%BE%99%E8%99%8E%E6%96%97-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P5016-%E9%BE%99%E8%99%8E%E6%96%97-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p><span class="math inline"><em>p</em>1</span> 位置加 <spanclass="math inline"><em>s</em>1</span>个工兵，先算一遍双方势力之差，然后依次枚举把 <spanclass="math inline"><em>s</em>2</span>个工兵放在所有的兵营里，取最小就行了</p><h2 id="代码">代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long n,m,sum1,sum2,minn,mink,a[100010],p,s1,s2;</span><br><span class="line">int read()&#123;</span><br><span class="line">    int x=0;</span><br><span class="line">    int mk=1;</span><br><span class="line">    char ch=getchar();</span><br><span class="line">    while(ch!=&#x27;-&#x27;&amp;&amp;(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;)) ch=getchar();</span><br><span class="line">    if(ch==&#x27;-&#x27;)&#123;</span><br><span class="line">        mk=-1;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;)&#123;</span><br><span class="line">        x=x*10+ch-48;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    return x*mk;</span><br><span class="line">&#125;//快速读入</span><br><span class="line">int main()&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">        a[i]=read();</span><br><span class="line">    m=read();p=read();s1=read();s2=read();//读入</span><br><span class="line">    a[p]+=s1;//累计p的位置</span><br><span class="line">    for(int i=1;i&lt;=m-1;i++)</span><br><span class="line">        sum1+=a[i]*(m-i);</span><br><span class="line">    for(int i=m+1;i&lt;=n;i++)</span><br><span class="line">        sum2+=a[i]*(i-m);//累计和</span><br><span class="line">    minn=abs(sum2-sum1);</span><br><span class="line">    mink=m;//放在第m的位置</span><br><span class="line">    if(sum1&lt;sum2)&#123;</span><br><span class="line">        for(int i=1;i&lt;m;i++)</span><br><span class="line">            if(minn&gt;abs(sum2-(sum1+s2*(m-i))))&#123;</span><br><span class="line">                minn=abs(sum2-(sum1+s2*(m-i)));</span><br><span class="line">                mink=i;</span><br><span class="line">            &#125;//放在左边</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(int i=m+1;i&lt;=n;i++)</span><br><span class="line">            if(minn&gt;abs(sum1-(sum2+s2*(i-m))))&#123;</span><br><span class="line">                minn=abs(sum1-(sum2+s2*(i-m)));</span><br><span class="line">                mink=i;</span><br><span class="line">            &#125;//放在右边</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,mink);//输出</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1865 A%B Problem 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1865-A-B-Problem-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1865-A-B-Problem-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>使用筛表法筛除 <span class="math inline">1 <em>m</em></span>的素数，然后累计 <span class="math inline">1 <em>m</em></span>的素数个数，最后输出 <spanclass="math inline"><em>s</em><em>u</em><em>m</em>[<em>r</em>] − <em>s</em><em>u</em><em>m</em>[<em>l</em> − 1]</span>即可。</p><h2 id="代码">代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m,l,r,sum[1000010];</span><br><span class="line">bool a[1000010];</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    for(int i=2;i*i&lt;=m;i++)&#123;</span><br><span class="line">        if(!a[i])&#123;</span><br><span class="line">            for(int j=i;j*i&lt;=m;j++)&#123;</span><br><span class="line">                a[i*j]=true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[1]=true;</span><br><span class="line">    for(int i=1;i&lt;=m;i++)&#123;</span><br><span class="line">        if(!a[i])&#123;</span><br><span class="line">            sum[i]=sum[i-1]+1;</span><br><span class="line">        &#125; else sum[i]=sum[i-1];</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        if(l&lt;1||l&gt;m||r&lt;1||r&gt;m)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;Crossing the line&quot;&lt;&lt;endl;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum[r]-sum[l-1]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1598 垂直柱状图 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1598-%E5%9E%82%E7%9B%B4%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1598-%E5%9E%82%E7%9B%B4%E6%9F%B1%E7%8A%B6%E5%9B%BE-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>这是一道很简单的水题，只是把统计出来的数字用一个数组保存下来后，空的地方用空格替代，最后输出即可。</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s1,s2,s3,s4;</span><br><span class="line"><span class="type">int</span> maxx,a[<span class="number">30</span>];</span><br><span class="line"><span class="type">char</span> b[<span class="number">110</span>][<span class="number">30</span>];<span class="comment">//最后输出的数组。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s1);</span><br><span class="line">    <span class="built_in">getline</span>(cin,s2);</span><br><span class="line">    <span class="built_in">getline</span>(cin,s3);</span><br><span class="line">    <span class="built_in">getline</span>(cin,s4);</span><br><span class="line">    <span class="comment">//读入数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=s<span class="number">1.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s1[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            a[s1[i]-<span class="string">&#x27;A&#x27;</span><span class="number">+1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=s<span class="number">2.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s2[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            a[s2[i]-<span class="string">&#x27;A&#x27;</span><span class="number">+1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=s<span class="number">3.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s3[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s3[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            a[s3[i]-<span class="string">&#x27;A&#x27;</span><span class="number">+1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=s<span class="number">4.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s4[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s4[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">            a[s4[i]-<span class="string">&#x27;A&#x27;</span><span class="number">+1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计字母</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)&#123;</span><br><span class="line">        maxx=<span class="built_in">max</span>(maxx,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求最高的高度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=maxx;j&gt;=maxx-a[i]<span class="number">+1</span>;j--)&#123;</span><br><span class="line">            b[j][i]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=maxx-a[i];j&gt;=<span class="number">1</span>;j--) b[j][i]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        b[maxx<span class="number">+1</span>][i]=i+<span class="string">&#x27;A&#x27;</span><span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="comment">//形成最后输出的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx<span class="number">+1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">51</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;b[i][j/<span class="number">2</span><span class="number">+1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1255 数楼梯 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1255-%E6%95%B0%E6%A5%BC%E6%A2%AF-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1255-%E6%95%B0%E6%A5%BC%E6%A2%AF-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>题意是说让我们求 <span class="math inline"><em>n</em></span>级台阶，每次走一步或两步，问有多少种方法，就是一道明显的斐波拉切数列。</p><h2 id="代码">代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,len=<span class="number">1</span>,f[<span class="number">5003</span>][<span class="number">5003</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hp</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">     f[k][i]=f[k<span class="number">-1</span>][i]+f[k<span class="number">-2</span>][i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len;i++)            </span><br><span class="line">     <span class="keyword">if</span>(f[k][i]&gt;=<span class="number">10</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         f[k][i<span class="number">+1</span>]+=f[k][i]/<span class="number">10</span>;</span><br><span class="line">         f[k][i]=f[k][i]%<span class="number">10</span>;</span><br><span class="line">         <span class="keyword">if</span>(f[k][len<span class="number">+1</span>])len++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>; f[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">2</span>;      </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=n;i++)             </span><br><span class="line">     <span class="built_in">hp</span>(i);                         </span><br><span class="line">    <span class="keyword">for</span>(i=len;i&gt;=<span class="number">1</span>;i--)           </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[n][i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT 25 プログラミングコンテスト 题解</title>
      <link href="/2025/10/09/AT-25-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/AT-25-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题意">题意：</h2><p>这道题是要求出一行中最多有多少个 <span class="math inline">1</span>，所以两重循环足以搞定。</p><p>外循环从 <span class="math inline">1</span> 到 <spanclass="math inline"><em>n</em></span> 行，每循环从 <spanclass="math inline">1</span> 到 <spanclass="math inline"><em>m</em></span> 列，每行找最大值输出即可。</p><h2 id="代码">代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,c,maxx,maxi;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>) c++;</span><br><span class="line">&#125;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,c);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;maxx&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atcoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P2404 自然数的拆分问题 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P2404-%E8%87%AA%E7%84%B6%E6%95%B0%E7%9A%84%E6%8B%86%E5%88%86%E9%97%AE%E9%A2%98-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P2404-%E8%87%AA%E7%84%B6%E6%95%B0%E7%9A%84%E6%8B%86%E5%88%86%E9%97%AE%E9%A2%98-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>这是一道 <spanclass="math inline"><em>D</em><em>F</em><em>S</em></span> 的题目。</p><p>这道题你仔细观察样例，可以发现：输出的数是从小到大的。所以我们要有一个qs。下一次直接从qs开始枚举；</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> he,<span class="type">int</span> c,<span class="type">int</span> qs)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(he==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c<span class="number">-2</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">&#125;<span class="comment">//输出。</span></span><br><span class="line">cout&lt;&lt;a[c<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(he&gt;n) <span class="keyword">return</span>;<span class="comment">//过头返回。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=qs;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">a[c]=i;<span class="comment">//记录输出。</span></span><br><span class="line"><span class="built_in">dfs</span>(he+i,c<span class="number">+1</span>,i);</span><br><span class="line">a[c]=<span class="number">0</span>;<span class="comment">//改回原来的0；</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1044 栈 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1044-%E6%A0%88-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1044-%E6%A0%88-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>这道题是经典的卡塔兰数的运用。</p><p>我是用 <spanclass="math inline"><em>a</em>[<em>n</em> − <em>c</em> + 2] = <em>a</em>[<em>n</em> − <em>c</em> + 2] + <em>a</em>[<em>i</em>] * <em>a</em>[(<em>n</em> − <em>c</em> + 1) − <em>i</em>];</span>这个公式来推倒的。</p><p>在一开始需要 <spanclass="math inline"><em>a</em>[0] = 1；<em>a</em>[1] = 1；</span></p><p>然后用一个递推</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DP</span><span class="params">(<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;a[n];<span class="comment">//到底输出。</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n-c<span class="number">+1</span>;i++)&#123;</span><br><span class="line">a[n-c<span class="number">+2</span>]=a[n-c<span class="number">+2</span>]+a[i]*a[(n-c<span class="number">+1</span>)-i];<span class="comment">//递推累加。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">DP</span>(c<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//这样卡塔兰数已经保存在a数组里了。直接输出即可。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1164 小A点菜 题解</title>
      <link href="/2025/10/09/%E6%B4%9B%E8%B0%B7-P1164-%E5%B0%8FA%E7%82%B9%E8%8F%9C-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/%E6%B4%9B%E8%B0%B7-P1164-%E5%B0%8FA%E7%82%B9%E8%8F%9C-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>这道题明显是 <span class="math inline"><em>D</em><em>P</em></span> 或<span class="math inline"><em>D</em><em>F</em><em>S</em></span> , <spanclass="math inline"><em>D</em><em>F</em><em>S</em></span>剪枝后不会超，所以我在这里写 <spanclass="math inline"><em>D</em><em>F</em><em>S</em></span> 。</p><p>到底的判断：现在的总钱数等于 <spanclass="math inline"><em>m</em></span> ，则答案加一。</p><p>剪枝1：现在钱数大于 <span class="math inline"><em>m</em></span> ,<spanclass="math inline"><em>r</em><em>e</em><em>t</em><em>u</em><em>r</em><em>n</em>;</span></p><p>剪枝2：已经点的菜数&gt;总共菜数 <spanclass="math inline"><em>r</em><em>e</em><em>t</em><em>u</em><em>r</em><em>n</em>;</span></p><p>而题目说每种菜交换顺序是一种，所以可以 <spanclass="math inline"><em>f</em><em>o</em><em>r</em>(<em>i</em><em>n</em><em>t</em><em>i</em> = <em>q</em><em>s</em>；<em>i</em> &lt;  = <em>n</em>; <em>i</em> + +)</span>这样写循环。</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">110</span>],cnt;</span><br><span class="line"><span class="type">bool</span> b[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> he,<span class="type">int</span> c,<span class="type">int</span> qs)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(he==m)&#123;<span class="comment">//到底判断</span></span><br><span class="line">cnt++;<span class="comment">//答案加一</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(he&gt;m) <span class="keyword">return</span>;<span class="comment">//剪枝1</span></span><br><span class="line"><span class="keyword">if</span>(c&gt;n) <span class="keyword">return</span>;<span class="comment">//剪枝2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=qs;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!b[i])&#123;<span class="comment">//没有用过</span></span><br><span class="line">b[i]=<span class="literal">true</span>;改成用过</span><br><span class="line"><span class="built_in">dfs</span>(he+a[i],c<span class="number">+1</span>,i);<span class="comment">//dfs</span></span><br><span class="line">b[i]=<span class="literal">false</span>;<span class="comment">//改回没有用过</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;cnt;<span class="comment">//输出答案</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF534C Polycarpus&#39; Dice 题解</title>
      <link href="/2025/10/09/CF534C-Polycarpus-Dice-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/CF534C-Polycarpus-Dice-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="更正题意">更正题意</h2><ul><li>要求输出的是每个色子不能达到要求点数的个数。</li></ul><h2 id="思路">思路</h2><ul><li>对于一个色子，我们先求出其他色子可以掷出的范围，那么我们就能得到这个色子所可能掷出的范围，这样将这个范围减去就可以求出答案了。</li></ul><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">namespace</span> SGT</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putc</span><span class="params">(<span class="type">char</span> ch)</span></span>&#123;<span class="built_in">putchar</span>(ch);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="type">int</span> mk=<span class="number">1</span>,x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getc</span>();<span class="keyword">while</span>(ch!=<span class="string">&#x27;-&#x27;</span>&amp;&amp;(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>))ch=<span class="built_in">getc</span>();<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)mk=<span class="number">-1</span>,ch=<span class="built_in">getc</span>();<span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getc</span>();<span class="keyword">return</span> x*mk;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x,std::string ch)</span></span>&#123;<span class="type">char</span> cc[<span class="number">100000</span>];<span class="type">int</span> t=<span class="number">0</span>;<span class="keyword">if</span>(x==<span class="number">0</span>)<span class="built_in">putc</span>(<span class="string">&#x27;0&#x27;</span>);<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;<span class="keyword">while</span>(x)&#123;cc[++t]=<span class="built_in">char</span>(x%<span class="number">10</span><span class="number">+48</span>);x/=<span class="number">10</span>;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=t;i&gt;=<span class="number">1</span>;i--)<span class="built_in">putc</span>(cc[i]);<span class="keyword">if</span>(ch.<span class="built_in">size</span>()&gt;<span class="number">0</span>)<span class="built_in">putc</span>(ch[<span class="number">0</span>]);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> str[],std::string ch)</span></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)<span class="built_in">putc</span>(str[i]);<span class="keyword">if</span>(ch.<span class="built_in">size</span>()&gt;<span class="number">0</span>)<span class="built_in">putc</span>(ch[<span class="number">0</span>]);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> wr,std::string ch)</span></span>&#123;<span class="built_in">putc</span>(wr);<span class="keyword">if</span>(ch.<span class="built_in">size</span>()&gt;<span class="number">0</span>)<span class="built_in">putc</span>(ch[<span class="number">0</span>]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&gt;b?a:b);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&lt;b?a:b);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="type">int</span> r;<span class="keyword">while</span>(b&gt;<span class="number">0</span>)&#123;r=a%b;a=b;b=r;&#125;<span class="keyword">return</span> a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</span><br><span class="line"><span class="type">int</span> n,k,a[<span class="number">200010</span>],sum;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line">k=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=<span class="built_in">read</span>();</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> minn=n<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> maxx=sum-a[i];<span class="comment">//其他色子的范围</span></span><br><span class="line"><span class="keyword">if</span>(k-maxx&gt;<span class="number">0</span>) ans+=k-maxx<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(k-minn&lt;=a[i]) ans+=a[i]-k+minn;</span><br><span class="line"><span class="built_in">write</span>(ans,<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1360G A/B Matrix 题解</title>
      <link href="/2025/10/09/CF1360G-A-B-Matrix-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/CF1360G-A-B-Matrix-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>首先判断 <span class="math inline">“ <em>N</em><em>O</em>”</span>，可以发现只有 <spanclass="math inline"><em>n</em> * <em>a</em> = <em>m</em> * <em>b</em></span>是才会是 <spanclass="math inline">“ <em>Y</em><em>E</em><em>S</em>”</span> 。</p><p>接着，我们可以记录上一行到哪一位，这一行接着那一位往下构造，可以证明，这样每一列的<span class="math inline">1</span> 的个数最多差 <spanclass="math inline">1</span> ，可以证明这样构造出来的答案正确。</p><p>如 <spanclass="math inline"><em>n</em> = 3, <em>m</em> = 6, <em>a</em> = 2, <em>b</em> = 1</span>时： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 1 0 0 0 0</span><br><span class="line">0 0 1 1 0 0</span><br><span class="line">0 0 0 0 1 1</span><br></pre></td></tr></table></figure> ## 代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">namespace</span> SGT</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putc</span><span class="params">(<span class="type">char</span> ch)</span></span>&#123;<span class="built_in">putchar</span>(ch);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="type">int</span> mk=<span class="number">1</span>,x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getc</span>();<span class="keyword">while</span>(ch!=<span class="string">&#x27;-&#x27;</span>&amp;&amp;(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>))ch=<span class="built_in">getc</span>();<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)mk=<span class="number">-1</span>,ch=<span class="built_in">getc</span>();<span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getc</span>();<span class="keyword">return</span> x*mk;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x,std::string ch)</span></span>&#123;<span class="type">char</span> cc[<span class="number">100000</span>];<span class="type">int</span> t=<span class="number">0</span>;<span class="keyword">if</span>(x==<span class="number">0</span>)&#123;<span class="built_in">putc</span>(<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span> ;&#125;<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;<span class="keyword">while</span>(x)&#123;cc[++t]=<span class="built_in">char</span>(x%<span class="number">10</span><span class="number">+48</span>);x/=<span class="number">10</span>;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=t;i&gt;=<span class="number">1</span>;i--)<span class="built_in">putc</span>(cc[i]);<span class="keyword">if</span>(ch.<span class="built_in">size</span>()&gt;<span class="number">0</span>)<span class="built_in">putc</span>(ch[<span class="number">0</span>]);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> str[],std::string ch)</span></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)<span class="built_in">putc</span>(str[i]);<span class="keyword">if</span>(ch.<span class="built_in">size</span>()&gt;<span class="number">0</span>)<span class="built_in">putc</span>(ch[<span class="number">0</span>]);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> wr,std::string ch)</span></span>&#123;<span class="built_in">putc</span>(wr);<span class="keyword">if</span>(ch.<span class="built_in">size</span>()&gt;<span class="number">0</span>)<span class="built_in">putc</span>(ch[<span class="number">0</span>]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&gt;b?a:b);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&lt;b?a:b);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</span><br><span class="line"><span class="type">int</span> T,n,m,a,b,ans[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(n*a!=m*b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">write</span>(<span class="string">&quot;NO&quot;</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">write</span>(<span class="string">&quot;YES&quot;</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> xb=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=a;j++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i][xb++]=<span class="number">1</span>;</span><br><span class="line">xb=(xb<span class="number">-1</span>)%m<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="built_in">write</span>(ans[i][j],<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">write</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF518B Tanya and Postcard 题解</title>
      <link href="/2025/10/09/CF518B-Tanya-and-Postcard-%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/10/09/CF518B-Tanya-and-Postcard-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="思路">思路</h2><p>由于题目要求匹配大小写，我们要将大小写分开存放。</p><p>统计 <span class="math inline"><em>s</em>, <em>t</em></span>的每个字母大小写个数。</p><p>由于要求“耶”尽可能多，所以尽可能匹配大小写。</p><p>将大小写尽可能匹配后，剩下的只有可能是“哎呦”，因此对于 <spanclass="math inline"><em>s</em>, <em>t</em></span>中剩余的字母，取每个字符不区分大小写后的最小值，加和即可。</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">namespace</span> SGT</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">getc</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putc</span><span class="params">(<span class="type">char</span> ch)</span></span>&#123;<span class="built_in">putchar</span>(ch);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="type">int</span> mk=<span class="number">1</span>,x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getc</span>();<span class="keyword">while</span>(ch!=<span class="string">&#x27;-&#x27;</span>&amp;&amp;(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>))ch=<span class="built_in">getc</span>();<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)mk=<span class="number">-1</span>,ch=<span class="built_in">getc</span>();<span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getc</span>();<span class="keyword">return</span> x*mk;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x,<span class="type">char</span> ch)</span></span>&#123;<span class="type">char</span> cc[<span class="number">100000</span>];<span class="type">int</span> t=<span class="number">0</span>;<span class="keyword">if</span>(x==<span class="number">0</span>)<span class="built_in">putc</span>(<span class="string">&#x27;0&#x27;</span>);<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;<span class="keyword">while</span>(x)&#123;cc[++t]=<span class="built_in">char</span>(x%<span class="number">10</span><span class="number">+48</span>);x/=<span class="number">10</span>;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=t;i&gt;=<span class="number">1</span>;i--)<span class="built_in">putc</span>(cc[i]);<span class="built_in">putc</span>(ch);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> str[],<span class="type">char</span> ch)</span></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)<span class="built_in">putc</span>(str[i]);<span class="built_in">putc</span>(ch);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">char</span> wr,<span class="type">char</span> ch)</span></span>&#123;<span class="built_in">putc</span>(wr);<span class="built_in">putc</span>(ch);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&gt;b?a:b);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> (a&lt;b?a:b);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</span><br><span class="line"><span class="type">char</span> s[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> t1[<span class="number">200</span>],t2[<span class="number">200</span>],tt1,tt2,ans1,ans2;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getc</span>();</span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">t1[ch-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">ch=<span class="built_in">getc</span>();</span><br><span class="line">&#125;</span><br><span class="line">ch=<span class="built_in">getc</span>();</span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">t2[ch-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">ch=<span class="built_in">getc</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t1[i]&gt;t2[i]) t1[i]-=t2[i],ans1+=t2[i],t2[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> t2[i]-=t1[i],ans1+=t1[i],t1[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i1=<span class="number">0</span>;i1&lt;=<span class="number">25</span>;i1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=i1+<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(t1[i]&gt;t2[i]) t1[i]-=t2[i],ans1+=t2[i],t2[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> t2[i]-=t1[i],ans1+=t1[i],t1[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">tt1=t1[i]+t1[i+<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">tt2=t2[i]+t2[i+<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">ans2+=<span class="built_in">min</span>(tt1,tt2);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">write</span>(ans1,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="built_in">write</span>(ans2,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P2295-MICE</title>
      <link href="/2020/10/23/%E6%B4%9B%E8%B0%B7-P2296-MICE-%E9%A2%98%E8%A7%A3/"/>
      <url>/2020/10/23/%E6%B4%9B%E8%B0%B7-P2296-MICE-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目大意">题目大意</h2><p>一个矩阵，每个元素均为 <span class="math inline">0</span> 或 <spanclass="math inline">1</span>，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的 <spanclass="math inline">1</span> 最少，输出 <spanclass="math inline">1</span> 的个数（只能向下或右走）</p><h2 id="思路">思路</h2><p>从左上角到右下角的最少一的个数，这明显是一个 <spanclass="math inline"><em>D</em><em>P</em></span> 题，那就应该推导 <spanclass="math inline"><em>D</em><em>P</em></span>转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有一维是方向，而剩下还要两维是这个点的位置。</p><p>但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：</p><p>1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。</p><p>2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了<spanclass="math inline"><em>f</em>[<em>i</em>][<em>j</em>][1]</span>，和<spanclass="math inline"><em>f</em>[<em>i</em>][<em>j</em>][0]</span>，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.那么我们这样就得到了状态转移方程和预处理。预处理 <spanclass="math inline"><em>v</em><em>a</em><em>l</em>[<em>i</em>][<em>j</em>]</span>数组表示第 <span class="math inline"><em>i</em></span> 行 <spanclass="math inline"><em>j</em></span>列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。</p><p><spanclass="math inline"><em>f</em><sub><em>i</em>, <em>j</em>, 0/1</sub></span><span class="math inline"><em>i</em></span> ，<spanclass="math inline"><em>j</em></span> 是位置，<spanclass="math inline">0</span> 指左，<span class="math inline">1</span>指右</p><h3 id="初始化">初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">v[i][j]+=a[i][j<span class="number">+1</span>]+a[i<span class="number">+1</span>][j];<span class="comment">//记录当前点右边和下边的1的个数</span></span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]=v[<span class="number">1</span>][<span class="number">0</span>]; </span><br><span class="line">f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]=f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=v[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="状态转移">状态转移</h3><ul><li><p>从左边来：<code>f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);</code></p></li><li><p>从右边来：<code>f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);</code></p></li></ul><h3 id="总代码">总代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,v[<span class="number">1010</span>][<span class="number">1010</span>],f[<span class="number">1010</span>][<span class="number">1010</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">v[i][j]+=a[i][j<span class="number">+1</span>]+a[i<span class="number">+1</span>][j];</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]=v[<span class="number">1</span>][<span class="number">0</span>]; </span><br><span class="line">f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]=f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=v[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>][<span class="number">0</span>]+v[i][j]+a[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>][<span class="number">1</span>]+v[i][j]);</span><br><span class="line">f[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(f[i<span class="number">-1</span>][j][<span class="number">1</span>]+v[i][j]+a[i][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j][<span class="number">0</span>]+v[i][j]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;f[i][j][0]&lt;&lt;&#x27; &#x27;&lt;&lt;f[i][j][1]&lt;&lt;&quot; * &quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(f[n][m][<span class="number">0</span>],f[n][m][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github博客搭建</title>
      <link href="/2020/10/18/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%95%99%E7%A8%8B/"/>
      <url>/2020/10/18/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="准备">准备</h2><p>先下载<code>git</code>和<code>nodejs</code></p><div class="liushen-tag-link">  <a class="tag-Link" target="_blank" rel="noopener" href="https://git-scm.com/downloads">    <div class="tag-link-tips">⚠️ 这不是我的网站哦！我可不知道它安不安全</div>    <div class="tag-link-bottom">      <div class="tag-link-left"           style="background-image: url(https://api.xinac.net/icon/?url=git-scm.com)"          onerror="this.style.backgroundImage='url(/images/default-avatar.webp)'"></div>      <div class="tag-link-right">        <div class="tag-link-title">git</div>        <div class="tag-link-sitename">下载</div>      </div>      <i class="fa-solid fa-angle-right"></i>    </div>  </a></div><div class="liushen-tag-link">  <a class="tag-Link" target="_blank" rel="noopener" href="https://nodejs.org/en/download/">    <div class="tag-link-tips">⚠️ 这不是我的网站哦！我可不知道它安不安全</div>    <div class="tag-link-bottom">      <div class="tag-link-left"           style="background-image: url(https://api.xinac.net/icon/?url=nodejs.org)"          onerror="this.style.backgroundImage='url(/images/default-avatar.webp)'"></div>      <div class="tag-link-right">        <div class="tag-link-title">nodejs</div>        <div class="tag-link-sitename">下载</div>      </div>      <i class="fa-solid fa-angle-right"></i>    </div>  </a></div><p>注意，<code>nodejs</code>用<code>msi</code>下载，不要下载<code>zip</code></p><p>打开<code>git</code>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>检查nodejs是否下载好。</p><p>若显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XX.XX.XX或VXX.XX.XX</span><br></pre></td></tr></table></figure><p>即可</p><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有<code>done</code>没有<code>error</code>就行。</p><h2 id="本地建立">本地建立</h2><p>新建一个文件夹，以下用<code>blog</code>代替。</p><p>右键<code>blog</code>，打开<code>git bush</code></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p><code>cd进入myblog</code></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开 <a href="localhost:4000">localhost:4000</a> 查看</p><h2 id="网上建立">网上建立</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在<code>GitHub.com</code>中看到一个<code>New repository</code>，新建仓库。<br>​创建一个和你用户名相同的仓库，<a href="http://XXX.github.io/">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://XXX.github.io/">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。<br>​回到你的git bash中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建<code>SSH</code>,一路回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在<code>GitHub</code>的<code>setting</code>中，找到<code>SSH keys</code>的设置选项，点击<code>New SSH key </code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>在<code>git bash</code>中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将<code>hexo</code>生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br>​<code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p><p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！(注意要过一会才会更新)</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
